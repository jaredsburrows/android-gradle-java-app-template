buildscript {
  apply from: 'gradle/dependencies.gradle'

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:8.4.1'
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:4.0.0'
    classpath 'com.github.triplet.gradle:play-publisher:3.12.1' // 3.9.0
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.51.0'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.github.ben-manes.versions'

android {
  compileSdkVersion buildConfig.compileSdk
  namespace 'burrows.apps.example.template'

  defaultConfig {
    applicationId 'burrows.apps.example.template'
    versionCode 1
    versionName '1.0'
    minSdkVersion buildConfig.minSdk
    targetSdkVersion buildConfig.targetSdk
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    resConfigs 'en'
    vectorDrawables.useSupportLibrary = true
  }

  signingConfigs {
    debug {
      storeFile file('config/debug.keystore')
      storePassword buildConfig.signing.password
      keyAlias buildConfig.signing.alias
      keyPassword buildConfig.signing.password
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
      proguardFile 'proguard-rules.pro'
      signingConfig signingConfigs.debug
    }
  }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    checkAllWarnings true
    warningsAsErrors true
    lintConfig = file('config/lint.xml')
    checkReleaseBuilds = false
    checkTestSources = true
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      returnDefaultValues = true
    }
  }
}

dependencies {
  implementation deps.material
  implementation deps.androidx.cardview
  implementation deps.gps.ads
  implementation deps.gps.basement
  implementation deps.gps.base

  androidTestImplementation deps.androidx.test.runner
  androidTestImplementation deps.androidx.test.rules
  androidTestImplementation deps.androidx.test.espresso.core
  androidTestImplementation deps.androidx.test.espresso.intents
  androidTestImplementation deps.androidx.test.espresso.contrib
  androidTestImplementation deps.androidx.test.ext.junit

  testImplementation deps.androidx.test.runner
  testImplementation deps.androidx.test.rules
  testImplementation deps.androidx.test.espresso.core
  testImplementation deps.androidx.test.ext.junit
  testImplementation deps.junit
  testImplementation deps.mockito.inline
  testImplementation deps.robolectric
  testImplementation deps.assertj
}

play {
  serviceAccountEmail = 'jaredsburrows@gmail.com'
  pk12File = file('config/key.p12')
  track = 'production' // or 'beta' or 'alpha'
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  configure(options) {
    compilerArgs << '-Xlint:all'            // Turn on all warnings
    compilerArgs << '-Xlint:-options'       // Turn off 'missing' bootclasspath warning
    compilerArgs << '-Xlint:-classfile'     // Espresso
    encoding = 'utf-8'
  }
}

tasks.withType(Test).configureEach {
  testLogging {
    exceptionFormat 'full'
    showCauses true
    showExceptions true
    showStackTraces true
    events = ['failed', 'skipped']
  }

  failFast = true
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.configureEach { task ->
  if (task instanceof JavaForkOptions) {
    // should improve memory on a 64bit JVM
    task.jvmArgs("-XX:+UseCompressedOops")
    // should avoid GradleWorkerMain to steal focus
    task.jvmArgs("-Djava.awt.headless=true")
    task.jvmArgs("-Dapple.awt.UIElement=true")
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }
}

tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.ALL
}

